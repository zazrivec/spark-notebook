{
  "metadata" : {
    "name" : "Using DataTable",
    "user_save_timestamp" : "2015-01-02T01:10:22.815Z",
    "auto_save_timestamp" : "2015-01-02T01:09:06.871Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "Define some data structure"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "case class Data(dbl:Double, n:String, b:Boolean)\n\n// ↓ won't work will fail later on (when using format) with a type mismatch exception!\n  // clearly a compiler problem...\n//import play.api.libs.json._\n//import play.api.libs.functional.syntax._\n\n//val format = Json.format[Data]\n",
    "outputs" : [ ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "A way to generate data easily"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import scala.util.Random._\ndef random:Data = Data(nextDouble, alphanumeric.take(10).mkString(\"\"), nextBoolean)",
    "outputs" : [ ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "Some data"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "val data = List.fill(10)(random)",
    "outputs" : [ ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "Since using inception won't work... :-("
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import play.api.libs.json._\n\nval r:Reads[Data] = Reads{ j => \n  JsSuccess(\n    Data((j \\ \"dbl\").as[Double],\n         (j \\ \"n\").as[String],\n         (j \\ \"b\").as[Boolean]\n    )\n  )\n}\nval w:Writes[Data] = OWrites{ (d:Data) =>  \n  Json.obj(\n    \"dbl\" → JsNumber(d.dbl),\n    \"n\" → JsString(d.n),\n    \"b\" → JsBoolean(d.b)    \n  )\n}\nval f = Format[Data](r, w)",
    "outputs" : [ ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "Create the codec for the data "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import notebook.Codec\nimport notebook.JsonCodec._\n\nimplicit val dataCodec:Codec[JsValue, Data] = formatToCodec(Some((_:String) => ???))(f)",
    "outputs" : [ ]
  }, {
    "metadata" : { },
    "cell_type" : "markdown",
    "source" : "Show the data in a table"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false
    },
    "cell_type" : "code",
    "source" : "import notebook.front.widgets._  \nnew DataTable(data)(dataCodec).plot",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}